color(black).
color(white).
game(epaminondas).
gamecreator("Bob Abbott").
turn(1). %1 is white, 2 is black
horizontalLines(12).
verticalLines(14).

notturn(1,X):- X is 2.
notturn(2,X):- X is 1.

% 1 é branco, 2 é preto
estadoInicial( [ [2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1] ] ).

%Através de duast current window cláusulas recursivas imprimir o estado atual do jogo
sepforprint([],_,_,_).
sepforprint( [H|T], _totalVerticalLines, _totalHorizontalLines, _currentHorizontal):-
  write('     '),
  numbers(vert,_currentHorizontal),
  _currentHorizontal1 is _currentHorizontal - 1,
  printline(H),
  write('   |'),
  nl,
  write('     '),
  write('   '),
  write('  '),
  lineseparator(_totalVerticalLines),
  nl,
  sepforprint(T,_totalVerticalLines,_totalHorizontalLines,_currentHorizontal1).

numbers( horiz, _current):-
  _current < 15, _current >9,
  _current1 is _current + 1,
  write('   '),
  write(_current),
  write('   '),
  numbers(horiz, _current1).

numbers( horiz, _current):-
  _current < 10,
  _current1 is _current + 1,
  write('   '),
  write(' '),
  write(_current),
  write('   '),
  numbers(horiz, _current1).
numbers(horiz,_).

numbers( vert, _current):-
  _current >= 10,
  write(_current).

numbers( vert, _current):-
  _current < 10,
  write(' '),
  write(_current).

printline([]).
printline( [H|T] ):-
  write('   |   '),
  printchar(H),
  printline(T).

lineseparator(0).
lineseparator( N ):-
  N > 0,
  write(' -------'),
  N1 is N-1,
  lineseparator(N1).

%2 is Black 1 is White
printchar(0) :-
  write(' ').
printchar(1) :-
  write('W').
printchar(2) :-
  write('B').

%Simple boundary testing
size(X,Y):- X>=1, X=<14, Y>=1, Y=<12.

%Mostrar o tabuleiro inicial - only used for initial visual debugging
show :-
  estadoInicial(E),
  show(E).

%Recebe o tabuleiro e chama o separador
show(E):-
  nl,
  nl,
  write('     '),
  write('   '),
  write('  '),
  horizontalLines(_totalHorizontalLines),
  verticalLines(_totalVerticalLines),
  lineseparator(_totalVerticalLines),
  nl,
  sepforprint(E,_totalVerticalLines,_totalHorizontalLines,_totalHorizontalLines),
  nl,
  write('     '),
  write('   '),
  write('  '),
  numbers(horiz,1),!,1=1. % não meti ,!,fail. Porque iria dar no e isso podia confundir o utilizador.

% Its better to read the values (if there is a way) than create a rule with arguments. noob friendly
start :-
  estadoInicial(E),
  show(E),
  read(XS), read(YS), read(XD), read(YD), %le desta forma XS.YS.XD.YD.
  play(E, XS, YS, XD, YD).

play( E, XS, YS, XD, YD) :-
  xDIFy(XS,YS,XD,YD),
  size(XS,YS),
  size(XD,YD),
  atualizarEstado(E,XS,YS,XD,YD,N),
  show(N),
  read(XS), read(YS), read(XD), read(YD), % le desta forma XS.YS.XD.YD.
  play( N, XS, YS, XD, YD).
%If sizes are not allowed retry.
play(E,_,_,_,_):-badMoveFriend(E).

xDIFy(XS,YS,XD,YD) :-
  XS =\= XD; YS =\= YD.

atualizarEstado( E, XS, YS, XD, YD, N) :-
  XS1 is XS - 1,
  YS1 is 12 - YS, % Porque na verdade o que aparece no tabuleiro tem o índice trocado.
  canimovethere(E,XS,YS,XD,YD),
  mudarestado(E,XS,YS,XD,YD,N),
  turnchange(C).
atualizarEstado(E,_,_,_,_,_):-badMoveFriend(E).

%Rules for phalanx
canimovethere( E, XS, YS, XD, YD) :-
  regras( E, XS, YS, XD, YD).
%If rules are not respected
canimovethere(E,_,_,_,_):-badMoveFriend(E).

%Não é preciso fazer a distinção de regras entre phalanx e piece
%visto que uma piece é uma phalanx de tamanho 1
regras([H|T], XS, YS, XD, YD) :-
  turn(C),
  checkcolour(E,XS,YS,C),
  regra('sobreposicao',E,XS,YS,XD,YD),
  regra('capturar',E,XS,YS,XD,YD).

regra('sobreposicao', E, XS, YS, XD, YD) :-
  charat(C1,XS,YS,E),
  charat(C2,XD,YD,E),
  C1 =\= C2.

regra('moverPhalanx', E, XS, YS, XD, YD) :-
   VerticalDifference is YD - YS,
   HorizontalDifference is XD - XS,
   lineOfAction(VertDifference,HorizontalDifference,E,XS,YS,XD,YD).

lineOfAction( VertDifference, HorizontalDifference, E, XS, YS, XD, YD) :-
  slope is abs(VertDifference/HorizontalDifference),
  slope == 1,
  turn(C),
  getSizeTilColour('horizontalLine',HorizontalDifference,_,E,C,XS,YS,PhalanxSizeMine),
  find.

lineOfAction(0, HorizontalDifference, E, XS, YS, XD, _) :-
  groupSizeMine('horizontalLine',HorizontalDifference,E,XS,YS,PhalanxSize).

lineOfAction( VerticalDifference, 0, E, XS, YS, XD, YD) :-
  groupSizeMine('verticalLine',VerticalDifference,E,XS,YS,PhalanxSize).

getSizeTilColour(PhalanxSize) :- estadoInicial(E), getSizeTilColour('verticalLine',_,-2,E,1,11,11,PhalanxSize).
getSizeTilColour('horizontalLine',HorizontalDifference,_,E,C,X,Y,PhalanxSize):-
  HorizontalDifference > 0, X =< 13,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X+1,
  getSizeTilColour('horizontalLine',HorizontalDifference,_,E,C,X1,Y,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('horizontalLine',HorizontalDifference,_,E,C,X,Y,PhalanxSize):-
  HorizontalDifference < 0 , X >= 0,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X-1,
  getSizeTilColour('horizontalLine',HorizontalDifference,_,E,C,X1,Y,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('verticalLine',_,VerticalDifference,E,C,X,Y,PhalanxSize):-
  VerticalDifference > 0, Y =< 11,
  charat(C1,X,Y,E),
  C1 == C,
  Y1 is Y+1,
  getSizeTilColour('verticalLine',_,VerticalDifference,E,C,X,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('verticalLine',_,VerticalDifference,E,C,X,Y,PhalanxSize):-
  VerticalDifference < 0, Y >= 0,
  charat(C1,X,Y,E),
  C1 == C,
  Y1 is Y-1,
  getSizeTilColour('verticalLine',_,VerticalDifference,E,C,X,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X,Y,PhalanxSize):-
  HorizontalDifference > 0, VerticalDifference > 0, X =< 13, Y =< 11,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X+1,
  Y1 is Y+1,
  getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X1,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X,Y,PhalanxSize):-
  HorizontalDifference > 0, VerticalDifference < 0, X =< 13, Y >= 0,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X+1,
  Y1 is Y-1,
  getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X1,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X,Y,PhalanxSize):-
  HorizontalDifference < 0, VerticalDifference > 0, X >= 0, Y =< 11,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X-1,
  Y1 is Y+1,
  getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X1,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X,Y,PhalanxSize):-
  HorizontalDifference < 0, VerticalDifference < 0, X >= 0, Y >= 0,
  charat(C1,X,Y,E),
  C1 == C,
  X1 is X-1,
  Y1 is Y-1,
  getSizeTilColour('diagonalLine',HorizontalDifference,VerticalDifference,E,C,X1,Y1,PhalanxSize1),
  PhalanxSize is PhalanxSize1+1.

getSizeTilColour(_,_,_,_,_,14,_,0).
getSizeTilColour(_,_,_,_,_,-1,_,0).
getSizeTilColour(_,_,_,_,_,_,12,0).
getSizeTilColour(_,_,_,_,_,_,-1,0).

getSizeTilColour(_,_,_,E,C,X,Y,0):-
  charat(C1,X,Y,E),
  C =\= C1.

%getSizeTilColour( 'horizontalLine', LIST, HorizontalDifference, XS, N, C, PhalanxSize) :-
%  HorizontalDifference < 0, XS =< 13,
%  charat(COLOUR,XS,LIST),
%  COLOUR == C,
%  XS1 is XS + 1,
%  getSizeTilColour('horizontalLine',LIST,HorizontalDifference,XS1,N1,C,PhalanxSize).
% lineOfAction(0, HorizontalDifference, E, XS, YS, XD, _) :-
%   groupSizeMine('horizontalLine',HorizontalDifference,E,XS,YS,PhalanxSize).

% groupSizeMine('horizontalLine',HorizontalDifference, E, XS, YS, PhalanxSize) :-
%   getHead(YS,E,LIST), % Recebe aqui a cabeça LIST
%   turn(C), %Recebe a cor
%   getSizeTilColour('horizontalLine',LIST,HorizontalDifference,XS,0,C,PhalanxSize).

% getSizeTilColour('horizontalLine',_,_,_,N,_,PhalanxSize):- PhalanxSize is N.

% lineOfAction( VerticalDifference, 0, E, XS, YS, _, YD) :-
%   groupSizeMine('verticalLine',VerticalDifference,E,XS,YS,PhalanxSize).

% groupSizeMine( 'verticalLine', VerticalDifference, E, XS, YS, PhalanxSize) :-
%   turn(C),
%   getSizeTilColour('verticalLine',E,VerticalDifference,XS,YS,0,C,PhalanxSize).

%checkcolour:-estadoInicial(E),checkcolour(E,0,11,1).
checkcolour(E, XS, YS, C) :-
  charat(ELEMENT,XS,YS,E),
  !, % if TAIL == C fails then dont backtrack (checkcolour) go to atualizarEstado an then fail with badMoveFriend
  ELEMENT == C. % just checks if they are the same, == is different from =. Because = unifies and == doesnt.

%If a fact/rule fails we want player to have another go.
badMoveFriend(E):-
  nl,
  write('That move is not allowed.'),
  nl,
  show(E),
  read(XS), read(YS), read(XD), read(YD), % le desta forma XS.YS.XD.YD.
  play( E, XS, YS, XD, YD).

%mudar o conteúdo da lista de listas, necessário cláusula recursiva.
%checks if it is a phalanx or a piece. And acts upon that information.
%mudarestado( [H|T], XS, YS, XD, YD, N) :-

%changechar changes any cell of the board with the value passed in C(char)
%http://stackoverflow.com/questions/13103415/remove-element-x-y-from-list-of-lists-in-prolog (Source)

%changechar:- estadoInicial(E), changechar(1,10,1,E,N), show(N). %Example

changechar(C,X,Y,[H|T],[H|R]):- Y>0, Y1 is Y-1, changechar(C,X,Y1,T,R).
changechar(C,X,0,[H|T],[H1|T]):- changechar(C,X,H,H1).
changechar(C,X,[H|T],[H|T1]):- X>0, X1 is X-1, changechar(C,X1,T,T1).
changechar(C,0,[_|T],[C|T]).

%charat char at a given position on board
%charat(C):- estadoInicial(E), charat(C,11,11,E).
charat(C,X,Y,[_|T]):- Y>0, Y1 is Y-1, charat(C,X,Y1,T).
charat(C,X,0,[H|_]):- charat(C,X,H).
charat(C,X,[_|T]):- X>0, X1 is X-1, charat(C,X1,T).
charat(C,0,[C|_]).

changechar:- estadoInicial(E), changechar(2,13,11,E,N), show(N). %Example

%findh(XN) :- estadoInicial(E), find('horizontalLine',2,2,11,11,13,E,XN) !, 1=1.
%findh(XN) :- estadoInicial(E), changechar(2,13,11,E,N), find('horizontalLine',-2,2,11,11,0,N,XN), !, 1=1.
findv(YN) :- estadoInicial(E), find('verticalLine',11,1,13,0,11,E,YN), !, 1=1.

find('horizontalLine',HorizontalDifference,C,XH,YH,XD,E,XN) :-
  HorizontalDifference > 0, XH < XD,
  charat(COLOUR,XH,YH,E),
  C =\= COLOUR,
  XH1 is XH + 1,
  find('horizontalLine',HorizontalDifference,C,XH1,YH,XD,E,XN).

find('horizontalLine',HorizontalDifference,C,XH,YH,XD,E,XN) :-
  HorizontalDifference < 0, XH > XD,
  charat(COLOUR,XH,YH,E),
  C =\= COLOUR,
  XH1 is XH - 1,
  find('horizontalLine',HorizontalDifference,C,XH1,YH,XD,E,XN).

find('verticalLine',VerticalDifference,C,XH,YH,YD,E,YN) :-
  VerticalDifference > 0, YH < YD,
  charat(COLOUR,XH,YH,E),
  C =\= COLOUR,
  YH1 is YH + 1,
  find('verticalLine',VerticalDifference,C,XH,YH1,YD,E,YN).

find('verticalLine',_,C,XH,YD,YD,E,YN) :- charat(COLOUR,XH,YD,E), C =\= COLOUR, YN is - 1.
find('verticalLine',_,_,_,YH,_,_,YN) :- YN is YH.
find('horizontalLine',_,C,XD,YH,XD,E,XN) :- charat(COLOUR,XD,YH,E), C =\= COLOUR, XN is - 1.
find('horizontalLine',_,_,XH,_,_,_,XN) :- XN is XH.

% %getHead returns the list in a given index
% %getHead(H):- estadoInicial(E), getHead(0,E,H).
% getHead(Y,[H|T],Head):- Y>0, Y1 is Y-1, getHead(Y1,T,Head).
% getHead(0,[H|T],H).

% movePhalanxUP :- estadoInicial(E), movePhalanxUP(E,11,11,10,2,E1),show(E1).
movePhalanxUP(E,X,YS,YD,N,E1):-
  N>0, turn(T),
  YS1 is YS-1,
  YD1 is YD-1,
  N1 is N-1,
  movePhalanxUP(E,X,YS1,YD1,N1,E3),
  changechar(0,X,YS,E3,E2),
  changechar(T,X,YD,E2,E1).
movePhalanxUP(E,_,_,_,0,E).

% movePhalanxDOWN :- estadoInicial(E), movePhalanxDOWN(E,0,0,2,2,E1),show(E1).
movePhalanxDOWN(E,X,YS,YD,N,E1):-
  N>0, turn(T),
  YS1 is YS+1,
  YD1 is YD+1,
  N1 is N-1,
  movePhalanxDOWN(E,X,YS1,YD1,N1,E3),
  changechar(0,X,YS,E3,E2),
  changechar(T,X,YD,E2,E1).
movePhalanxDOWN(E,_,_,_,0,E).

% movePhalanxRIGHT :- estadoInicial(E), movePhalanxRIGHT(E,0,0,2,2,E1),show(E1).
movePhalanxRIGHT(E,XS,XD,Y,N,E1):-
  N>0, turn(T),
  XS1 is XS+1,
  XD1 is XD+1,
  N1 is N-1,
  movePhalanxRIGHT(E,XS1,XD1,Y,N1,E3),
  changechar(0,XS,Y,E3,E2),
  changechar(T,XD,Y,E2,E1).
movePhalanxRIGHT(E,_,_,_,0,E).

% movePhalanxLEFT :- estadoInicial(E), movePhalanxLEFT(E,0,0,2,2,E1),show(E1).
movePhalanxLEFT(E,XS,XD,Y,N,E1):-
  N>0, turn(T),
  XS1 is XS-1,
  XD1 is XD-1,
  N1 is N-1,
  movePhalanxLEFT(E,XS1,XD1,Y,N1,E3),
  changechar(0,XS,Y,E3,E2),
  changechar(T,XD,Y,E2,E1).
movePhalanxLEFT(E,_,_,_,0,E).

movePhalanxUPLEFT :- estadoInicial(E), movePhalanxUPLEFT(E,11,11,10,10,2,E1),show(E1).
movePhalanxUPLEFT(E,XS,YS,XD,YD,N,E1):-
  N>0, turn(T),
  XS1 is XS-1,
  YS1 is YS-1,
  XD1 is XD-1,
  YD1 is YD-1,
  N1 is N-1,
  movePhalanxUPLEFT(E,XS1,YS1,XD1,YD1,N1,E3),
  changechar(0,XS,YS,E3,E2),
  changechar(T,XD,YD,E2,E1).
movePhalanxUPLEFT(E,_,_,_,_,0,E).

movePhalanxUPRIGHT :- estadoInicial(E), movePhalanxUPRIGHT(E,11,11,12,10,2,E1),show(E1).
movePhalanxUPRIGHT(E,XS,YS,XD,YD,N,E1):-
  N>0, turn(T),
  XS1 is XS+1,
  YS1 is YS-1,
  XD1 is XD+1,
  YD1 is YD-1,
  N1 is N-1,
  movePhalanxUPRIGHT(E,XS1,YS1,XD1,YD1,N1,E3),
  changechar(0,XS,YS,E3,E2),
  changechar(T,XD,YD,E2,E1).
movePhalanxUPRIGHT(E,_,_,_,_,0,E).

movePhalanxDOWNLEFT :- estadoInicial(E), movePhalanxDOWNLEFT(E,3,0,2,1,2,E1),show(E1).
movePhalanxDOWNLEFT(E,XS,YS,XD,YD,N,E1):-
  N>0, turn(T),
  XS1 is XS-1,
  YS1 is YS+1,
  XD1 is XD-1,
  YD1 is YD+1,
  N1 is N-1,
  movePhalanxDOWNLEFT(E,XS1,YS1,XD1,YD1,N1,E3),
  changechar(0,XS,YS,E3,E2),
  changechar(T,XD,YD,E2,E1).
movePhalanxDOWNLEFT(E,_,_,_,_,0,E).

movePhalanxDOWNRIGHT :- estadoInicial(E), movePhalanxDOWNRIGHT(E,3,0,4,1,2,E1),show(E1).
movePhalanxDOWNRIGHT(E,XS,YS,XD,YD,N,E1):-
  N>0, turn(T),
  XS1 is XS+1,
  YS1 is YS+1,
  XD1 is XD+1,
  YD1 is YD+1,
  N1 is N-1,
  movePhalanxDOWNRIGHT(E,XS1,YS1,XD1,YD1,N1,E3),
  changechar(0,XS,YS,E3,E2),
  changechar(T,XD,YD,E2,E1).
movePhalanxDOWNRIGHT(E,_,_,_,_,0,E).

% turnchange(turn(C)) :-
%   ( C = white -> retract(turn(1)) ; retract(turn(2))),
%   ( C = black -> asserta(turn(1)) ; asserta(turn(2))).
